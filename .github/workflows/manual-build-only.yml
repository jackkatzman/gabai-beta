name: Manual APK Build (Safe)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Setup Java 17 (Force Consistent Environment)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Kill All Gradle Daemons and Reset Environment
      run: |
        # Kill any existing Gradle daemons with wrong Java version
        pkill -f gradle || true
        rm -rf ~/.gradle/daemon/ || true
        
        # Force consistent Java environment
        echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
        echo "PATH=$JAVA_HOME/bin:$PATH" >> $GITHUB_ENV
        echo "GRADLE_OPTS=-Dorg.gradle.java.home=$JAVA_HOME -Dfile.encoding=UTF-8 -Dorg.gradle.daemon=false" >> $GITHUB_ENV
        echo "JAVA_OPTS=-Dfile.encoding=UTF-8" >> $GITHUB_ENV
        
        # Verify Java version
        java -version
        javac -version

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Install dependencies
      run: npm install

    - name: Build web application
      run: npx vite build

    - name: Sync Capacitor
      run: npx cap sync android

    - name: Embrace Java 21 Build Environment
      run: |
        # Set Java 21 environment variables
        export JAVA_OPTS="-Dfile.encoding=UTF-8"
        export GRADLE_OPTS="-Dorg.gradle.jvmargs=-Xmx1536m -Dfile.encoding=UTF-8"
        
        echo "âœ… Using Java 21 build environment - matching Capacitor defaults"
        
    - name: Build APK with Docker (Isolated Environment)
      run: |
        echo "ðŸ”§ Building APK using Docker for complete isolation..."
        
        # Create Dockerfile for controlled build environment
        cat > Dockerfile.android <<EOF
        FROM openjdk:17-jdk-slim
        
        # Install required packages
        RUN apt-get update && apt-get install -y \
          wget \
          unzip \
          git \
          curl \
          && rm -rf /var/lib/apt/lists/*
        
        # Install Android SDK
        ENV ANDROID_SDK_ROOT=/opt/android-sdk
        ENV ANDROID_HOME=\$ANDROID_SDK_ROOT
        ENV PATH=\$PATH:\$ANDROID_HOME/tools:\$ANDROID_HOME/platform-tools:\$ANDROID_HOME/cmdline-tools/latest/bin
        
        RUN mkdir -p \$ANDROID_SDK_ROOT/cmdline-tools && \
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip && \
          unzip commandlinetools-linux-8512546_latest.zip -d \$ANDROID_SDK_ROOT/cmdline-tools && \
          mv \$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools \$ANDROID_SDK_ROOT/cmdline-tools/latest && \
          rm commandlinetools-linux-8512546_latest.zip
        
        # Accept licenses and install SDK components
        RUN yes | sdkmanager --licenses && \
          sdkmanager "platforms;android-35" "build-tools;35.0.0" "platform-tools"
        
        WORKDIR /app
        
        # Set Java 17 environment
        ENV JAVA_HOME=/usr/local/openjdk-17
        ENV GRADLE_OPTS="-Dorg.gradle.java.home=\$JAVA_HOME -Dfile.encoding=UTF-8"
        
        # Copy project files
        COPY . .
        
        # Make gradlew executable and build
        RUN cd android && \
          chmod +x gradlew && \
          ./gradlew clean --no-daemon && \
          ./gradlew assembleDebug --no-daemon --stacktrace
        EOF
        
        # Build using Docker
        docker build -f Dockerfile.android -t gabai-android-builder .
        
        # Extract APK from container
        docker create --name gabai-extract gabai-android-builder
        docker cp gabai-extract:/app/android/app/build/outputs/apk/debug/app-debug.apk ./app-debug.apk
        docker rm gabai-extract
        
        echo "âœ… APK built successfully using Docker isolation"

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: gabai-manual-apk
        path: |
          app-debug.apk
          android/app/build/outputs/apk/debug/app-debug.apk